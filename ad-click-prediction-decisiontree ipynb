{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9339481,"sourceType":"datasetVersion","datasetId":5659619}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-12T23:10:57.829772Z","iopub.execute_input":"2024-09-12T23:10:57.830234Z","iopub.status.idle":"2024-09-12T23:10:57.848727Z","shell.execute_reply.started":"2024-09-12T23:10:57.830196Z","shell.execute_reply":"2024-09-12T23:10:57.847369Z"},"trusted":true},"execution_count":382,"outputs":[{"name":"stdout","text":"/kaggle/input/ad-click-prediction-dataset/ad_click_dataset.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"data=pd.read_csv(\"/kaggle/input/ad-click-prediction-dataset/ad_click_dataset.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:57.850835Z","iopub.execute_input":"2024-09-12T23:10:57.851220Z","iopub.status.idle":"2024-09-12T23:10:57.873494Z","shell.execute_reply.started":"2024-09-12T23:10:57.851183Z","shell.execute_reply":"2024-09-12T23:10:57.872307Z"},"trusted":true},"execution_count":383,"outputs":[]},{"cell_type":"code","source":"df=data.copy()","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:57.874874Z","iopub.execute_input":"2024-09-12T23:10:57.875228Z","iopub.status.idle":"2024-09-12T23:10:57.883019Z","shell.execute_reply.started":"2024-09-12T23:10:57.875190Z","shell.execute_reply":"2024-09-12T23:10:57.881681Z"},"trusted":true},"execution_count":384,"outputs":[]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:57.886769Z","iopub.execute_input":"2024-09-12T23:10:57.887321Z","iopub.status.idle":"2024-09-12T23:10:57.902956Z","shell.execute_reply.started":"2024-09-12T23:10:57.887236Z","shell.execute_reply":"2024-09-12T23:10:57.901487Z"},"trusted":true},"execution_count":385,"outputs":[{"execution_count":385,"output_type":"execute_result","data":{"text/plain":"id                     0\nfull_name              0\nage                 4766\ngender              4693\ndevice_type         2000\nad_position         2000\nbrowsing_history    4782\ntime_of_day         2000\nclick                  0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df[\"gender\"].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:57.904522Z","iopub.execute_input":"2024-09-12T23:10:57.904859Z","iopub.status.idle":"2024-09-12T23:10:57.918358Z","shell.execute_reply.started":"2024-09-12T23:10:57.904823Z","shell.execute_reply":"2024-09-12T23:10:57.917047Z"},"trusted":true},"execution_count":386,"outputs":[{"execution_count":386,"output_type":"execute_result","data":{"text/plain":"gender\nFemale        1834\nMale          1810\nNon-Binary    1663\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"gender_mask={\"Non-Binary\" : 0, \"Female\" : 1,\"Male\" : 2}","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:57.919863Z","iopub.execute_input":"2024-09-12T23:10:57.920365Z","iopub.status.idle":"2024-09-12T23:10:57.929764Z","shell.execute_reply.started":"2024-09-12T23:10:57.920286Z","shell.execute_reply":"2024-09-12T23:10:57.928597Z"},"trusted":true},"execution_count":387,"outputs":[]},{"cell_type":"code","source":"df[\"gender\"]=df[\"gender\"].map(gender_mask)","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:57.930973Z","iopub.execute_input":"2024-09-12T23:10:57.931372Z","iopub.status.idle":"2024-09-12T23:10:57.943345Z","shell.execute_reply.started":"2024-09-12T23:10:57.931319Z","shell.execute_reply":"2024-09-12T23:10:57.942213Z"},"trusted":true},"execution_count":388,"outputs":[]},{"cell_type":"code","source":"\nmost_frequent_value = df['gender'].mode()[0]\n\n\ndf['gender'].fillna(most_frequent_value, inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:57.944781Z","iopub.execute_input":"2024-09-12T23:10:57.945156Z","iopub.status.idle":"2024-09-12T23:10:57.959341Z","shell.execute_reply.started":"2024-09-12T23:10:57.945115Z","shell.execute_reply":"2024-09-12T23:10:57.957762Z"},"trusted":true},"execution_count":389,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_35/412722619.py:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df['gender'].fillna(most_frequent_value, inplace=True)\n","output_type":"stream"}]},{"cell_type":"code","source":"dfage=df[\"age\"].mean()\ndf[\"age\"].fillna(dfage, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:57.960617Z","iopub.execute_input":"2024-09-12T23:10:57.961011Z","iopub.status.idle":"2024-09-12T23:10:57.972156Z","shell.execute_reply.started":"2024-09-12T23:10:57.960972Z","shell.execute_reply":"2024-09-12T23:10:57.971019Z"},"trusted":true},"execution_count":390,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_35/2326727789.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df[\"age\"].fillna(dfage, inplace=True)\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\n\n\n\ndf['age'].hist(bins=10)\nplt.xlabel('Değerler')\nplt.ylabel('Frekans')\nplt.title('Sütun Dağılımı')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:57.977950Z","iopub.execute_input":"2024-09-12T23:10:57.978416Z","iopub.status.idle":"2024-09-12T23:10:58.243731Z","shell.execute_reply.started":"2024-09-12T23:10:57.978374Z","shell.execute_reply":"2024-09-12T23:10:58.242502Z"},"trusted":true},"execution_count":391,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:58.245614Z","iopub.execute_input":"2024-09-12T23:10:58.246014Z","iopub.status.idle":"2024-09-12T23:10:58.257990Z","shell.execute_reply.started":"2024-09-12T23:10:58.245975Z","shell.execute_reply":"2024-09-12T23:10:58.256884Z"},"trusted":true},"execution_count":392,"outputs":[{"execution_count":392,"output_type":"execute_result","data":{"text/plain":"id                     0\nfull_name              0\nage                    0\ngender                 0\ndevice_type         2000\nad_position         2000\nbrowsing_history    4782\ntime_of_day         2000\nclick                  0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df[\"device_type\"].unique()","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:58.260020Z","iopub.execute_input":"2024-09-12T23:10:58.260403Z","iopub.status.idle":"2024-09-12T23:10:58.272771Z","shell.execute_reply.started":"2024-09-12T23:10:58.260365Z","shell.execute_reply":"2024-09-12T23:10:58.271615Z"},"trusted":true},"execution_count":393,"outputs":[{"execution_count":393,"output_type":"execute_result","data":{"text/plain":"array(['Desktop', nan, 'Mobile', 'Tablet'], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"device_mask={\"Desktop\":0,\"Mobile\":1,\"Tablet\":2}\n\ndf[\"device_type\"]=df[\"device_type\"].map(device_mask)","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:58.274062Z","iopub.execute_input":"2024-09-12T23:10:58.274446Z","iopub.status.idle":"2024-09-12T23:10:58.285819Z","shell.execute_reply.started":"2024-09-12T23:10:58.274409Z","shell.execute_reply":"2024-09-12T23:10:58.284699Z"},"trusted":true},"execution_count":394,"outputs":[]},{"cell_type":"code","source":"gender_mode=df[\"device_type\"].mode()[0]\n\ndf[\"device_type\"].fillna(gender_mode,inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:58.287036Z","iopub.execute_input":"2024-09-12T23:10:58.287580Z","iopub.status.idle":"2024-09-12T23:10:58.299330Z","shell.execute_reply.started":"2024-09-12T23:10:58.287527Z","shell.execute_reply":"2024-09-12T23:10:58.298283Z"},"trusted":true},"execution_count":395,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_35/327261280.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df[\"device_type\"].fillna(gender_mode,inplace=True)\n","output_type":"stream"}]},{"cell_type":"code","source":"df[\"device_type\"].hist(bins=20)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:58.300886Z","iopub.execute_input":"2024-09-12T23:10:58.301813Z","iopub.status.idle":"2024-09-12T23:10:58.553850Z","shell.execute_reply.started":"2024-09-12T23:10:58.301772Z","shell.execute_reply":"2024-09-12T23:10:58.552689Z"},"trusted":true},"execution_count":396,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"df[\"ad_position\"].unique()","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:58.555428Z","iopub.execute_input":"2024-09-12T23:10:58.555865Z","iopub.status.idle":"2024-09-12T23:10:58.564850Z","shell.execute_reply.started":"2024-09-12T23:10:58.555816Z","shell.execute_reply":"2024-09-12T23:10:58.563697Z"},"trusted":true},"execution_count":397,"outputs":[{"execution_count":397,"output_type":"execute_result","data":{"text/plain":"array(['Top', 'Side', nan, 'Bottom'], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"ad_mask={'Top':0, 'Side':1,'Bottom':2}\n\ndf[\"ad_position\"]=df[\"ad_position\"].map(ad_mask)","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:58.566480Z","iopub.execute_input":"2024-09-12T23:10:58.566969Z","iopub.status.idle":"2024-09-12T23:10:58.577380Z","shell.execute_reply.started":"2024-09-12T23:10:58.566919Z","shell.execute_reply":"2024-09-12T23:10:58.576058Z"},"trusted":true},"execution_count":398,"outputs":[]},{"cell_type":"code","source":"ad_value=df[\"ad_position\"].mode()[0]\n\ndf[\"ad_position\"].fillna(ad_value,inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:58.578908Z","iopub.execute_input":"2024-09-12T23:10:58.579449Z","iopub.status.idle":"2024-09-12T23:10:58.592024Z","shell.execute_reply.started":"2024-09-12T23:10:58.579408Z","shell.execute_reply":"2024-09-12T23:10:58.590893Z"},"trusted":true},"execution_count":399,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_35/2022358809.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df[\"ad_position\"].fillna(ad_value,inplace=True)\n","output_type":"stream"}]},{"cell_type":"code","source":"brow_value=df[\"browsing_history\"].mode()[0]\n\ndf[\"browsing_history\"].fillna(brow_value,inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:58.593683Z","iopub.execute_input":"2024-09-12T23:10:58.594064Z","iopub.status.idle":"2024-09-12T23:10:58.610548Z","shell.execute_reply.started":"2024-09-12T23:10:58.594019Z","shell.execute_reply":"2024-09-12T23:10:58.609377Z"},"trusted":true},"execution_count":400,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_35/2719982855.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df[\"browsing_history\"].fillna(brow_value,inplace=True)\n","output_type":"stream"}]},{"cell_type":"code","source":"browsing_mask={\"Entertainment\":0,\"Social Media\":1,\"Education\":2,\"Shopping\":3,\"News\":4}\ndf[\"browsing_history\"]=df[\"browsing_history\"].map(browsing_mask)","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:58.612054Z","iopub.execute_input":"2024-09-12T23:10:58.612516Z","iopub.status.idle":"2024-09-12T23:10:58.624208Z","shell.execute_reply.started":"2024-09-12T23:10:58.612477Z","shell.execute_reply":"2024-09-12T23:10:58.622940Z"},"trusted":true},"execution_count":401,"outputs":[]},{"cell_type":"code","source":"df[\"time_of_day\"].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:58.625706Z","iopub.execute_input":"2024-09-12T23:10:58.626091Z","iopub.status.idle":"2024-09-12T23:10:58.639359Z","shell.execute_reply.started":"2024-09-12T23:10:58.626052Z","shell.execute_reply":"2024-09-12T23:10:58.638166Z"},"trusted":true},"execution_count":402,"outputs":[{"execution_count":402,"output_type":"execute_result","data":{"text/plain":"time_of_day\nMorning      2126\nAfternoon    2016\nEvening      1958\nNight        1900\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"import pandas as pd\n\n\ntime_map = {\n    'Morning': 0,\n    'Afternoon': 0,\n    'Evening': 1,\n    'Night': 1\n}\n\n\ndf['time_of_day'] = df['time_of_day'].map(time_map)\n\n\nprint(df['time_of_day'].value_counts())\n","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:58.640916Z","iopub.execute_input":"2024-09-12T23:10:58.641740Z","iopub.status.idle":"2024-09-12T23:10:58.652341Z","shell.execute_reply.started":"2024-09-12T23:10:58.641688Z","shell.execute_reply":"2024-09-12T23:10:58.651171Z"},"trusted":true},"execution_count":403,"outputs":[{"name":"stdout","text":"time_of_day\n0.0    4142\n1.0    3858\nName: count, dtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"time_value=df[\"time_of_day\"].mode()[0]\n\ndf[\"time_of_day\"].fillna(time_value,inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:58.653770Z","iopub.execute_input":"2024-09-12T23:10:58.654201Z","iopub.status.idle":"2024-09-12T23:10:58.661817Z","shell.execute_reply.started":"2024-09-12T23:10:58.654154Z","shell.execute_reply":"2024-09-12T23:10:58.660556Z"},"trusted":true},"execution_count":404,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_35/4239641326.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df[\"time_of_day\"].fillna(time_value,inplace=True)\n","output_type":"stream"}]},{"cell_type":"code","source":"\nfrom sklearn.preprocessing import StandardScaler\n\n\n\nscaler = StandardScaler()\ndf['age'] = scaler.fit_transform(df[['age']])\n\n\ndf","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:58.663256Z","iopub.execute_input":"2024-09-12T23:10:58.663630Z","iopub.status.idle":"2024-09-12T23:10:58.691461Z","shell.execute_reply.started":"2024-09-12T23:10:58.663595Z","shell.execute_reply":"2024-09-12T23:10:58.690354Z"},"trusted":true},"execution_count":405,"outputs":[{"execution_count":405,"output_type":"execute_result","data":{"text/plain":"        id full_name       age  gender  device_type  ad_position  \\\n0      670   User670 -1.916403     1.0          0.0          0.0   \n1     3044  User3044  0.000000     2.0          0.0          0.0   \n2     5912  User5912  0.084527     0.0          0.0          1.0   \n3     5418  User5418 -0.652657     2.0          0.0          2.0   \n4     9452  User9452 -0.126097     0.0          0.0          2.0   \n...    ...       ...       ...     ...          ...          ...   \n9995  8510  User8510  0.000000     1.0          1.0          0.0   \n9996  7843  User7843  0.000000     1.0          0.0          2.0   \n9997  3914  User3914  0.000000     2.0          1.0          1.0   \n9998  7924  User7924  0.000000     1.0          0.0          2.0   \n9999  3056  User3056  0.400464     2.0          2.0          0.0   \n\n      browsing_history  time_of_day  click  \n0                    3          0.0      1  \n1                    0          0.0      1  \n2                    2          1.0      1  \n3                    0          1.0      1  \n4                    1          0.0      0  \n...                ...          ...    ...  \n9995                 2          0.0      0  \n9996                 0          0.0      0  \n9997                 0          0.0      0  \n9998                 3          0.0      1  \n9999                 1          0.0      0  \n\n[10000 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>full_name</th>\n      <th>age</th>\n      <th>gender</th>\n      <th>device_type</th>\n      <th>ad_position</th>\n      <th>browsing_history</th>\n      <th>time_of_day</th>\n      <th>click</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>670</td>\n      <td>User670</td>\n      <td>-1.916403</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>0.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3044</td>\n      <td>User3044</td>\n      <td>0.000000</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5912</td>\n      <td>User5912</td>\n      <td>0.084527</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5418</td>\n      <td>User5418</td>\n      <td>-0.652657</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9452</td>\n      <td>User9452</td>\n      <td>-0.126097</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9995</th>\n      <td>8510</td>\n      <td>User8510</td>\n      <td>0.000000</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>2</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9996</th>\n      <td>7843</td>\n      <td>User7843</td>\n      <td>0.000000</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9997</th>\n      <td>3914</td>\n      <td>User3914</td>\n      <td>0.000000</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9998</th>\n      <td>7924</td>\n      <td>User7924</td>\n      <td>0.000000</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>3</td>\n      <td>0.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9999</th>\n      <td>3056</td>\n      <td>User3056</td>\n      <td>0.400464</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>10000 rows × 9 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"\nage_mode = df['age'].mean()\n\n\ndf['age'].replace(0, age_mode, inplace=True)\n\n\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:58.692720Z","iopub.execute_input":"2024-09-12T23:10:58.693043Z","iopub.status.idle":"2024-09-12T23:10:58.712309Z","shell.execute_reply.started":"2024-09-12T23:10:58.693011Z","shell.execute_reply":"2024-09-12T23:10:58.711199Z"},"trusted":true},"execution_count":406,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_35/2909103974.py:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df['age'].replace(0, age_mode, inplace=True)\n","output_type":"stream"},{"execution_count":406,"output_type":"execute_result","data":{"text/plain":"     id full_name           age  gender  device_type  ad_position  \\\n0   670   User670 -1.916403e+00     1.0          0.0          0.0   \n1  3044  User3044  1.652012e-16     2.0          0.0          0.0   \n2  5912  User5912  8.452736e-02     0.0          0.0          1.0   \n3  5418  User5418 -6.526574e-01     2.0          0.0          2.0   \n4  9452  User9452 -1.260969e-01     0.0          0.0          2.0   \n\n   browsing_history  time_of_day  click  \n0                 3          0.0      1  \n1                 0          0.0      1  \n2                 2          1.0      1  \n3                 0          1.0      1  \n4                 1          0.0      0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>full_name</th>\n      <th>age</th>\n      <th>gender</th>\n      <th>device_type</th>\n      <th>ad_position</th>\n      <th>browsing_history</th>\n      <th>time_of_day</th>\n      <th>click</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>670</td>\n      <td>User670</td>\n      <td>-1.916403e+00</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>0.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3044</td>\n      <td>User3044</td>\n      <td>1.652012e-16</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5912</td>\n      <td>User5912</td>\n      <td>8.452736e-02</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5418</td>\n      <td>User5418</td>\n      <td>-6.526574e-01</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9452</td>\n      <td>User9452</td>\n      <td>-1.260969e-01</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier, ExtraTreesClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nimport xgboost as xgb\n\nX = df.drop(columns=[\"id\", \"full_name\", \"click\"])\ny = df[\"click\"]\n\ndef evaluate_classification_models(X, y):\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    \n    \n    models_accuracy = {}\n\n  \n    models = {\n        'Logistic Regression': LogisticRegression(),\n        'SVC': SVC(),\n        'Decision Tree': DecisionTreeClassifier(),\n        'Random Forest': RandomForestClassifier(),\n        'K-Nearest Neighbors': KNeighborsClassifier(),\n        'Naive Bayes': GaussianNB(),\n        'Gradient Boosting': GradientBoostingClassifier(),\n        'AdaBoost': AdaBoostClassifier(),\n        'Extra Trees': ExtraTreesClassifier(),\n        'XGBoost': xgb.XGBClassifier()\n    }\n    \n  \n    for name, model in models.items():\n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_test)\n        accuracy = accuracy_score(y_test, y_pred)\n        models_accuracy[name] = accuracy\n        print(f\"{name} Accuracy: {accuracy}\")\n        print(f\"{name} Classification Report:\\n{classification_report(y_test, y_pred)}\")\n        print(f\"{name} Confusion Matrix:\\n{confusion_matrix(y_test, y_pred)}\")\n    \n    return models_accuracy\n\n\nevaluate_classification_models(X, y)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:10:58.713839Z","iopub.execute_input":"2024-09-12T23:10:58.714209Z","iopub.status.idle":"2024-09-12T23:11:05.737001Z","shell.execute_reply.started":"2024-09-12T23:10:58.714174Z","shell.execute_reply":"2024-09-12T23:11:05.735955Z"},"trusted":true},"execution_count":407,"outputs":[{"name":"stdout","text":"Logistic Regression Accuracy: 0.6465\nLogistic Regression Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.00      0.00      0.00       705\n           1       0.65      1.00      0.79      1295\n\n    accuracy                           0.65      2000\n   macro avg       0.32      0.50      0.39      2000\nweighted avg       0.42      0.65      0.51      2000\n\nLogistic Regression Confusion Matrix:\n[[   0  705]\n [   2 1293]]\nSVC Accuracy: 0.6485\nSVC Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.56      0.01      0.03       705\n           1       0.65      0.99      0.79      1295\n\n    accuracy                           0.65      2000\n   macro avg       0.60      0.50      0.41      2000\nweighted avg       0.62      0.65      0.52      2000\n\nSVC Confusion Matrix:\n[[  10  695]\n [   8 1287]]\nDecision Tree Accuracy: 0.73\nDecision Tree Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.69      0.43      0.53       705\n           1       0.74      0.89      0.81      1295\n\n    accuracy                           0.73      2000\n   macro avg       0.71      0.66      0.67      2000\nweighted avg       0.72      0.73      0.71      2000\n\nDecision Tree Confusion Matrix:\n[[ 304  401]\n [ 139 1156]]\nRandom Forest Accuracy: 0.722\nRandom Forest Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.69      0.39      0.50       705\n           1       0.73      0.90      0.81      1295\n\n    accuracy                           0.72      2000\n   macro avg       0.71      0.65      0.65      2000\nweighted avg       0.72      0.72      0.70      2000\n\nRandom Forest Confusion Matrix:\n[[ 273  432]\n [ 124 1171]]\nK-Nearest Neighbors Accuracy: 0.658\nK-Nearest Neighbors Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.52      0.32      0.40       705\n           1       0.70      0.84      0.76      1295\n\n    accuracy                           0.66      2000\n   macro avg       0.61      0.58      0.58      2000\nweighted avg       0.63      0.66      0.63      2000\n\nK-Nearest Neighbors Confusion Matrix:\n[[ 228  477]\n [ 207 1088]]\nNaive Bayes Accuracy: 0.646\nNaive Bayes Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.47      0.04      0.07       705\n           1       0.65      0.98      0.78      1295\n\n    accuracy                           0.65      2000\n   macro avg       0.56      0.51      0.43      2000\nweighted avg       0.59      0.65      0.53      2000\n\nNaive Bayes Confusion Matrix:\n[[  28  677]\n [  31 1264]]\nGradient Boosting Accuracy: 0.668\nGradient Boosting Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.68      0.11      0.19       705\n           1       0.67      0.97      0.79      1295\n\n    accuracy                           0.67      2000\n   macro avg       0.67      0.54      0.49      2000\nweighted avg       0.67      0.67      0.58      2000\n\nGradient Boosting Confusion Matrix:\n[[  77  628]\n [  36 1259]]\nAdaBoost Accuracy: 0.6585\nAdaBoost Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.64      0.07      0.13       705\n           1       0.66      0.98      0.79      1295\n\n    accuracy                           0.66      2000\n   macro avg       0.65      0.52      0.46      2000\nweighted avg       0.65      0.66      0.55      2000\n\nAdaBoost Confusion Matrix:\n[[  49  656]\n [  27 1268]]\nExtra Trees Accuracy: 0.72\nExtra Trees Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.66      0.42      0.52       705\n           1       0.74      0.88      0.80      1295\n\n    accuracy                           0.72      2000\n   macro avg       0.70      0.65      0.66      2000\nweighted avg       0.71      0.72      0.70      2000\n\nExtra Trees Confusion Matrix:\n[[ 298  407]\n [ 153 1142]]\nXGBoost Accuracy: 0.734\nXGBoost Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.77      0.35      0.48       705\n           1       0.73      0.94      0.82      1295\n\n    accuracy                           0.73      2000\n   macro avg       0.75      0.65      0.65      2000\nweighted avg       0.74      0.73      0.70      2000\n\nXGBoost Confusion Matrix:\n[[ 246  459]\n [  73 1222]]\n","output_type":"stream"},{"execution_count":407,"output_type":"execute_result","data":{"text/plain":"{'Logistic Regression': 0.6465,\n 'SVC': 0.6485,\n 'Decision Tree': 0.73,\n 'Random Forest': 0.722,\n 'K-Nearest Neighbors': 0.658,\n 'Naive Bayes': 0.646,\n 'Gradient Boosting': 0.668,\n 'AdaBoost': 0.6585,\n 'Extra Trees': 0.72,\n 'XGBoost': 0.734}"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeClassifier\n\nmodel=DecisionTreeClassifier()\n\nmodel.fit(X_train,y_train)\ny_pred=model.predict(X_test)\n\nprint(classification_report(y_test,y_pred))\n\nprint(confusion_matrix(y_test,y_pred))\n\nprint(f\"Accuracy:{accuracy_score(y_test,y_pred)}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-12T23:11:05.741593Z","iopub.execute_input":"2024-09-12T23:11:05.742267Z","iopub.status.idle":"2024-09-12T23:11:05.783702Z","shell.execute_reply.started":"2024-09-12T23:11:05.742227Z","shell.execute_reply":"2024-09-12T23:11:05.782472Z"},"trusted":true},"execution_count":408,"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0       0.68      0.43      0.53       705\n           1       0.74      0.89      0.81      1295\n\n    accuracy                           0.73      2000\n   macro avg       0.71      0.66      0.67      2000\nweighted avg       0.72      0.73      0.71      2000\n\n[[ 304  401]\n [ 142 1153]]\nAccuracy:0.7285\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}
